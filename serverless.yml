service: bcparks-ar-api

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: api
  region: ca-central-1

package:
  individually: true
  exclude:
    - "**/*"

plugins:
  - serverless-offline
  - serverless-plugin-include-dependencies
  - serverless-dotenv-plugin
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file

# package individually to avoid hitting the EMFILE limit
package:
  individually: true

functions:
  ###########
  # readConfig
  ###########
  readConfig:
    handler: lambda/readConfig/index.handler
    package:
      include:
        - lambda/readConfig/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: GET
          path: /config

  ###########
  # Park
  ###########
  parkGet:
    handler: lambda/park/GET/index.handler
    package:
      include:
        - lambda/park/GET/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: GET
          path: /park
          cors: true

  parkPost:
    handler: lambda/park/POST/index.handler
    package:
      include:
        - lambda/park/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /park
          cors: true

  parkPut:
    handler: lambda/park/PUT/index.handler
    package:
      include:
        - lambda/park/PUT/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: PUT
          path: /park
          cors: true

  # ###########
  # # SubArea
  # ###########
  subAreaGet:
    handler: lambda/subArea/GET/index.handler
    package:
      include:
        - lambda/subArea/GET/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: GET
          path: /subArea
          cors: true

  subAreaPost:
    handler: lambda/subArea/POST/index.handler
    package:
      include:
        - lambda/subArea/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /subArea
          cors: true

  subAreaPut:
    handler: lambda/subArea/PUT/index.handler
    package:
      include:
        - lambda/subArea/PUT/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: PUT
          path: /subArea
          cors: true

  subAreaDelete:
    handler: lambda/subArea/DELETE/index.handler
    package:
      include:
        - lambda/subArea/DELETE/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: DELETE
          path: /subArea
          cors: true

  ###########
  # Activity
  ###########
  activityGet:
    handler: lambda/activity/GET/index.handler
    package:
      include:
        - lambda/activity/GET/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: GET
          path: /activity
          cors: true

  activityPost:
    handler: lambda/activity/POST/index.handlePost
    package:
      include:
        - lambda/activity/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /activity
          cors: true

  activityPut:
    handler: lambda/activity/PUT/index.handler
    package:
      include:
        - lambda/activity/PUT/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: PUT
          path: /activity
          cors: true

  activityDelete:
    handler: lambda/activity/DELETE/index.handler
    package:
      include:
        - lambda/activity/DELETE/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: DELETE
          path: /activity
          cors: true

  activityRecordLock:
    handler: lambda/activity/POST/index.handleLock
    package:
      include:
        - lambda/activity/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /activity/lock
          cors: true

  activityRecordUnlock:
    handler: lambda/activity/POST/index.handleUnlock
    package:
      include:
        - lambda/activity/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /activity/unlock
          cors: true

  ###########
  # Cloudwatch Alarm
  ###########
  cloudwatchAlarm:
    handler: lambda/cloudwatchAlarm/index.handler
    package:
      include:
        - lambda/cloudwatchAlarm/**
        - node_modules/**
        - lambda/*.js

  ###########
  # Cloudwatch Alarm
  ###########
  nameUpdate:
    handler: lambda/nameUpdate/index.handler
    package:
      include:
        - lambda/nameUpdate/**
        - node_modules/**
        - lambda/*.js

  ###########
  # Export
  ###########
  exportInvokable:
    handler: lambda/export/invokable/index.handler
    package:
      include:
        - lambda/export/invokable/**
        - node_modules/**
        - lambda/*.js
    timeout: 300
  exportGet:
    handler: lambda/export/GET/index.handler
    package:
      include:
        - lambda/export/GET/**
        - node_modules/**
        - lambda/*.js
    timeout: 300
    events:
      - http:
          method: GET
          path: /export
          cors: true
  varianceExportInvokable:
    handler: lambda/export-variance/invokable/index.handler
    package:
      include:
        - lambda/export-variance/invokable/**
        - node_modules/**
        - lambda/*.js
    timeout: 300
  varianceExportGet:
    handler: lambda/export-variance/GET/index.handler
    package:
      include:
        - lambda/export-variance/GET/**
        - node_modules/**
        - lambda/*.js
    timeout: 300
    events:
      - http:
          method: GET
          path: /export-variance
          cors: true

  ###########
  # Fiscal Year End
  ###########
  fiscalYearEndGet:
    handler: lambda/fiscalYearEnd/GET/index.handler
    package:
      include:
        - lambda/fiscalYearEnd/GET/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: GET
          path: /fiscalYearEnd
          cors: true

  fiscalYearEndLock:
    handler: lambda/fiscalYearEnd/POST/index.lockFiscalYear
    package:
      include:
        - lambda/fiscalYearEnd/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /fiscalYearEnd/lock
          cors: true

  fiscalYearEndUnlock:
    handler: lambda/fiscalYearEnd/POST/index.unlockFiscalYear
    package:
      include:
        - lambda/fiscalYearEnd/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /fiscalYearEnd/unlock
          cors: true

  ###########
  # Variance
  ###########
  varianceGet:
    handler: lambda/variance/GET/index.handler
    package:
      include:
        - lambda/variance/GET/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: GET
          path: /variance
          cors: true

  variancePost:
    handler: lambda/variance/POST/index.handlePost
    package:
      include:
        - lambda/variance/POST/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: POST
          path: /variance
          cors: true

  variancePut:
    handler: lambda/variance/PUT/index.handler
    package:
      include:
        - lambda/variance/PUT/**
        - node_modules/**
        - lambda/*.js
    events:
      - http:
          method: PUT
          path: /variance
          cors: true

resources:
  Resources:
    databaseTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: arTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: orcs-index
            KeySchema:
              - AttributeName: orcs
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    nameCacheTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: nameCache
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
