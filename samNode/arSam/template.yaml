AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM deployment for A&R API

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        SSO_ISSUER: !Ref SSOIssuerUrl
        SSO_JWKSURI: !Ref SSOJWKSUri
        IS_OFFLINE: false
        DYNAMODB_ENDPOINT_URL: dynamodb.ca-central-1.amazonaws.com

Parameters:
  AccountId:
    Type: String
    Default: '123456789'
  AWSAccountList:
   Type: String
   Default: 'defaultAccount'
  Stage:
    Type: String
    Default: 'dev'
  ExportFunctionName:
    Type: String
    Default: 'bcparks-ar-api-api-exportInvokable'
  ExportExpiryTime:
    Type: String
    Default: '30'
  FilePath:
    Type: String
    Default: './'
  FileNameExport:
    Type: String
    Default: 'A&R_Export'
  FileNameVarianceExport:
    Type: String
    Default: 'A&R_Variance_Report'
  CsvSysadminSchema:
    Type: String
    Default: 'defaultSchema'
  JobUpdateModulo:
    Type: String
    Default: '1'
  DisableProgressUpdates:
    Type: String
    Default: 'false'
  DisableHighAccuracyProgressPercentage:
    Type: String
    Default: 'false'
  S3BucketData:
    Type: String
    Default: 'defaultBucket' 
  TableName:
    Type: String
    Default: 'ar-tests'
  ConfigTableName: 
    Type: String
    Default: "ar-config"
  JwtSecret: 
    Type: String 
    Default: "defaultSecret"
  JwtSignExpiry: 
    Type: String
    Default: "5"
  CaptchaSignExpiry: 
    Type: String
    Default: "30"
  PrivateKey: 
    Type: String
    Default: ""
  DataRegisterNameEndpoint: 
    Type: String
    Default: "defaultEndpoint"
  DataRegisterNameApiKey:
    Type: String
    Default: "defaultApiKey"
  SSOIssuerUrl: 
    Type: String
    Default: "https://dev.loginproxy.gov.bc.ca/auth/realms/bcparks-service-transformation"
  SSOJWKSUri: 
    Type: String
    Default: "https://dev.loginproxy.gov.bc.ca/auth/realms/bcparks-service-transformation/protocol/openid-connect/certs"

Resources:
  ## Roles
  StreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: 'ProcessDynamoDBStreamRolePolicyOne'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:ConditionCheckItem
                Resource: !Sub
                  - 'arn:aws:dynamodb:ca-central-1:${AccountId}:table/Audit'
                  - AccountId: !Ref AccountId
                Effect: Allow

  ### LAMBDA LAYERS ###
  VarianceLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: varianceLayer
      Description: Variance Layer
      ContentUri: layers/varianceLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile
  
  SubAreaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: subAreaLayer
      Description: SubArea Layer
      ContentUri: layers/subAreaLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  PermissionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: permissionLayer
      Description: Permission Layer
      ContentUri: layers/permissionLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  BaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: baseLayer
      Description: Base Layer
      ContentUri: layers/baseLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  KeycloakLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: keycloakLayer
      Description: Keycloak Layer
      ContentUri: layers/keycloakLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  FunctionsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: functionsLayer
      Description: Functions Layer
      ContentUri: layers/functionsLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  FormulaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: formulaLayer
      Description: Formula Layer
      ContentUri: layers/formulaLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  ConstantsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: constantsLayer
      Description: Constants Layer
      ContentUri: layers/constantsLayer/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  ### LAMBDA FUNCTIONS ###

  ActivityGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          JWT_SECRET: !Ref JwtSecret
          JWT_SIGN_EXPIRY: !Ref JwtSignExpiry
          CAPTCHA_SIGN_EXPIRY: !Ref CaptchaSignExpiry
          PRIVATE_KEY: !Ref PrivateKey
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: activity/GET/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
          - !Ref BaseLayer
          - !Ref PermissionLayer
      Events:
        activityGet:
          Type: Api
          Properties:
            Path: /activity
            Method: get
            RestApiId: !Ref ApiDeployment
        activityOptions:
          Type: Api
          Properties:
            Path: /activity
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ActivityPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          JWT_SECRET: !Ref JwtSecret
          JWT_SIGN_EXPIRY: !Ref JwtSignExpiry
          CAPTCHA_SIGN_EXPIRY: !Ref CaptchaSignExpiry
          PRIVATE_KEY: !Ref PrivateKey
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: activity/POST/
      Timeout: 60
      Handler: index.handlePost
      Runtime: nodejs18.x
      Layers:
          - !Ref PermissionLayer
          - !Ref BaseLayer
          - !Ref VarianceLayer
          - !Ref ConstantsLayer
      Events:
        activityPost:
          Type: Api
          Properties:
            Path: /activity
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ActivityPostLockFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          JWT_SECRET: !Ref JwtSecret
          JWT_SIGN_EXPIRY: !Ref JwtSignExpiry
          CAPTCHA_SIGN_EXPIRY: !Ref CaptchaSignExpiry
          PRIVATE_KEY: !Ref PrivateKey
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: activity/POST/
      Timeout: 60
      Handler: index.handleLock
      Runtime: nodejs18.x
      Layers:
          - !Ref PermissionLayer
          - !Ref BaseLayer
          - !Ref VarianceLayer
          - !Ref ConstantsLayer
      Events:
        activityRecordLock:
          Type: Api
          Properties:
            Path: /activity/lock
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true
    
  ActivityPostUnlockFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          JWT_SECRET: !Ref JwtSecret
          JWT_SIGN_EXPIRY: !Ref JwtSignExpiry
          CAPTCHA_SIGN_EXPIRY: !Ref CaptchaSignExpiry
          PRIVATE_KEY: !Ref PrivateKey
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: activity/POST/
      Timeout: 60
      Handler: index.handleUnlock
      Runtime: nodejs18.x
      Layers:
          - !Ref PermissionLayer
          - !Ref BaseLayer
          - !Ref VarianceLayer
          - !Ref ConstantsLayer
      Events:
        activityRecordUnlock:
          Type: Api
          Properties:
            Path: /activity/unlock
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ActivityDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
      CodeUri: activity/DELETE/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
          - !Ref BaseLayer
      Events:
        activityDelete:
          Type: Api
          Properties:
            Path: /activity
            Method: delete
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ActivityPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
      CodeUri: activity/PUT/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
          - !Ref BaseLayer
      Events:
        activityPut:
          Type: Api
          Properties:
            Path: /activity
            Method: put
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  CloudwatchAlarmFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cloudwatchAlarm/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
      Environment:
        Variables:
          AWS_ACCOUNT_LIST: !Ref AWSAccountList
          LOG_LEVEL: "debug"
      Events:
        cloudwatchAlarm:
          Type: Api
          Properties:
            Path: /cloudwatchAlarm
            Method: get
            RestApiId: !Ref ApiDeployment
        cloudwatchAlarmOptions:
          Type: Api
          Properties:
            Path: /cloudwatchAlarm
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ExportGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: export/GET/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_TABLE: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
          EXPORT_FUNCTION_NAME: !Ref ExportFunctionName
          EXPORT_EXPIRY_TIME: !Ref ExportExpiryTime
      Layers:
          - !Ref PermissionLayer
          - !Ref FunctionsLayer
          - !Ref BaseLayer
      Events:
        exportGet:
          Type: Api
          Properties:
            Path: /export
            Method: get
            RestApiId: !Ref ApiDeployment
        exportOptions:
          Type: Api
          Properties:
            Path: /export
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ExportInvokableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: export/invokable/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          FILE_PATH: !Ref FilePath
          FILE_NAME: !Ref FileNameExport
          CSV_SYSADMIN_SCHEMA: !Ref CsvSysadminSchema
          JOB_UPDATE_MODULO: !Ref JobUpdateModulo
          DISABLE_PROGRESS_UPDATES: !Ref DisableProgressUpdates
          DISABLE_HIGH_ACCURACY_PROGRESS_PERCENTAGE: !Ref DisableHighAccuracyProgressPercentage
          S3_BUCKET_DATA: !Ref S3BucketData
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          LOG_LEVEL: "info"
      Layers:
          - !Ref ConstantsLayer
          - !Ref FunctionsLayer
          - !Ref BaseLayer
          - !Ref FormulaLayer

  VarianceExportGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: export-variance/GET/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          JWT_SECRET: !Ref JwtSecret
          JWT_SIGN_EXPIRY: !Ref JwtSignExpiry
          CAPTCHA_SIGN_EXPIRY: !Ref CaptchaSignExpiry
          PRIVATE_KEY: !Ref PrivateKey
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      Layers:
          - !Ref BaseLayer
          - !Ref PermissionLayer
      Events:
        varianceExportGet:
          Type: Api
          Properties:
            Path: /export-variance
            Method: get
            RestApiId: !Ref ApiDeployment
        varianceExportOptions:
          Type: Api
          Properties:
            Path: /export-variance
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  VarianceExportInvokableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: export-variance/invokable/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          FILE_PATH: !Ref FilePath
          FILE_NAME: !Ref FileNameVarianceExport
          S3_BUCKET_DATA: !Ref S3BucketData
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          LOG_LEVEL: "info"
      Layers:
          - !Ref BaseLayer
          - !Ref ConstantsLayer

  FiscalYearEndGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: fiscalYearEnd/GET/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
          - !Ref BaseLayer
      Events:
        fiscalYearEndGet:
          Type: Api
          Properties:
            Path: /fiscalYearEnd
            Method: get
            RestApiId: !Ref ApiDeployment
        fiscalYearEndOptions:
          Type: Api
          Properties:
            Path: /fiscalYearEnd
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  FiscalYearEndPostLockFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: fiscalYearEnd/POST/
      Timeout: 60
      Handler: index.lockFiscalYear
      Runtime: nodejs18.x
      Layers:
          - !Ref BaseLayer
          - !Ref PermissionLayer
      Events:
        fiscalYearEndLock:
          Type: Api
          Properties:
            Path: /fiscalYearEnd/lock
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  FiscalYearEndPostUnlockFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: fiscalYearEnd/POST/
      Timeout: 60
      Handler: index.unlockFiscalYear
      Runtime: nodejs18.x
      Layers:
          - !Ref BaseLayer
          - !Ref PermissionLayer
      Events:
        fiscalYearEndUnlock:
          Type: Api
          Properties:
            Path: /fiscalYearEnd/unlock
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  NameUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DATA_REGISTER_NAME_API_ENDPOINT: !Ref DataRegisterNameEndpoint
          DATA_REGISTER_NAME_API_KEY: !Ref DataRegisterNameApiKey
      CodeUri: nameUpdate/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
          - !Ref BaseLayer

  ParkGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          JWT_SECRET: !Ref JwtSecret
          JWT_SIGN_EXPIRY: !Ref JwtSignExpiry
          CAPTCHA_SIGN_EXPIRY: !Ref CaptchaSignExpiry
          PRIVATE_KEY: !Ref PrivateKey
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOG_LEVEL: "info"
      CodeUri: park/GET/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref PermissionLayer
        - !Ref BaseLayer
      Events:
        parkGet:
          Type: Api
          Properties:
            Path: /park
            Method: get
            RestApiId: !Ref ApiDeployment
        parkOptions:
          Type: Api
          Properties:
            Path: /park
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ParkPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
          LOC_LEVEL: "info"
      CodeUri: park/POST/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref PermissionLayer
        - !Ref BaseLayer
      Events:
        fiscalYearEndLock:
          Type: Api
          Properties:
            Path: /park
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ParkPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
      CodeUri: park/PUT/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
      Events:
        fiscalYearEndLock:
          Type: Api
          Properties:
            Path: /park
            Method: put
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ReadConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "error"
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
      CodeUri: readConfig/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
      Events:
        readConfigGet:
          Type: Api
          Properties:
            Path: /readConfig
            Method: get
            RestApiId: !Ref ApiDeployment
        readConfigOptions:
          Type: Api
          Properties:
            Path: /readConfig
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  SubAreaGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
      CodeUri: subArea/GET/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
      Events:
        subAreaGet:
          Type: Api
          Properties:
            Path: /subArea
            Method: get
            RestApiId: !Ref ApiDeployment
        subAreaOptions:
          Type: Api
          Properties:
            Path: /subArea
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  SubAreaDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
      CodeUri: subArea/DELETE/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
        - !Ref PermissionLayer
      Events:
        subAreaDelete:
          Type: Api
          Properties:
            Path: /subArea
            Method: delete
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  SubAreaPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri

      CodeUri: subArea/POST/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
        - !Ref KeycloakLayer
        - !Ref FormulaLayer
        - !Ref PermissionLayer
        - !Ref SubAreaLayer
      Events:
        subAreaPost:
          Type: Api
          Properties:
            Path: /subArea
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  SubAreaPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
      CodeUri: subArea/PUT/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
        - !Ref PermissionLayer
      Events:
        SubAreaPut:
          Type: Api
          Properties:
            Path: /subArea
            Method: put
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true
  
  VarianceGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri 
      CodeUri: variance/GET/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
        - !Ref PermissionLayer
      Events:
        varianceGet:
          Type: Api
          Properties:
            Path: /variance
            Method: get
            RestApiId: !Ref ApiDeployment
        varianceOptions:
          Type: Api
          Properties:
            Path: /variance
            Method: options
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true
  
  VariancePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
      CodeUri: variance/POST/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
      Events:
        variancePost:
          Type: Api
          Properties:
            Path: /variance
            Method: post
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  VariancePutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          LOG_LEVEL: "info"
          TABLE_NAME: !Ref TableName
          CONFIG_TABLE_NAME: !Ref ConfigTableName
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri
      CodeUri: variance/PUT/
      Timeout: 60
      Handler: index.handler
      Runtime: nodejs18.x
      Layers:
        - !Ref BaseLayer
        - !Ref PermissionLayer
      Events:
        variancePut:
          Type: Api
          Properties:
            Path: /variance
            Method: put
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ### API ###
  ApiDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST,GET,OPTIONS,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        ApiKeyRequired: true
        DefaultAuthorizer: KCAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          KCAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers:
                - Authorization

  ### AUTHORIZER ###
  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref PermissionLayer
      Runtime: nodejs18.x
      Environment:
        Variables:
          LOG_LEVEL: info
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri

Outputs:
  #   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  #   # Find out more about other implicit resources you can reference within SAM
  #   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiDeployment:
    Description: 'API Gateway endpoint URL for Stage for Config function'
    Value: !Sub 'https://${ApiDeployment}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/config/'
