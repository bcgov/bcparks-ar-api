name: Deploy Prod

run-name: Deploying ${{ github.event.inputs.releaseTag }} to prod

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: "Tag of version to be promoted to prod"
        required: true

env:
  TF_VERSION: 0.14.7
  TG_VERSION: 0.26.7
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: prod
  TARGET_ENV: prod

jobs:
  ci:
    name: Push to AWS Lambda
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Attempt to checkout tag
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.releaseTag }}

      - name: Tag not found
        if: ${{ failure() }}
        run: |
          echo "::error::Git Tag not found, please double check input"
          exit 1

      # Get artifacts from cache
      - name: Restore cached artifacts
        uses: actions/cache/restore@v3
        with:
          path: |
            **/terraform/src/artifacts
          key: ${{ github.sha }}-artifacts

      ### Get environment variables from AWS Parameter Store ###
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_SANDBOX }}
          role-duration-seconds: 900
          role-session-name: parks-ar-api-sandbox-gh-action
          role-skip-session-tagging: true

      ### Run Terragrunt ###
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.3.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Apply
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          aws_region: ${{ secrets.AWS_REGION }}
        run: terragrunt apply-all --terragrunt-non-interactive

  alert-if-failure:
    if: ${{ always() && (needs.ci.result=='failure')}}
    runs-on: ubuntu-latest
    needs: [ci]
    steps:
      - name: Send alert if building api-prod fails.
        id: failure_alert
        run: |
          curl -X POST -H 'Content-Type: application/json' --data '{"workflow":"${{github.workflow}}","repo":"${{github.repository}}"}' https://chat.developer.gov.bc.ca/hooks/${{ secrets.ROCKETCHAT_TOKEN }}
